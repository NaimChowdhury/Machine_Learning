install.packages("ISLR")
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(ggplot2)
curve(x^3 - 5*x^2 + x + 2, from = 0, to = 10)
vecG <- c(1,1,1,1,1,1,1,1,1,1,1,1,1,1,1)
trainingData <- data.frame(id = vecG, stringsAsFactors=TRUE)
# Creating each traing seet
for (i in (1:10)){
vecFx <- vector() # vector of random variables
vecX <- vector() # vector of randomly generated x
randEpsilon <- rnorm(15, 0, 2)
randX <- runif(15, 0, 10)
for(j in (1:15)){
fx <- ((randX[j])^3) - (5*((randX[j])^2)) + randX[j] + 2 + randEpsilon[j]
vecX[j] <- randX[j]
vecFx[j] <- fx
}
trainingData <- cbind(trainingData, data.frame(name = vecX))
trainingData <- cbind(trainingData, data.frame(name2 = vecFx))
}
colnames(trainingData) <- c("dummy", "x1", "fx1", "x2", "fx2", "x3", "fx3", "x4", "fx4", "x5", "fx5", "x6", "fx6", "x7", "fx7", "x8", "fx8", "x9", "fx9", "x10", "fx10")
trainingData <- trainingData[,-1]
fun.1 <- function(x) x^3 - 5*x^2 + x + 2
## Creating Testing Sets
vecG <- c(1,1,1,1,1,1,1,1,1,1,1,1,1,1,1)
testingData <- data.frame(id = vecG, stringsAsFactors=TRUE)
# Creating each testing set
for (i in (1:10)){
vecFx <- vector() # vector of random variables
vecX <- vector() # vector of randomly generated x
randEpsilon <- rnorm(15,0,2)
randX <- runif(15,0,10)
for(j in (1:15)){
fx <- ((randX[j])^3) - (5*((randX[j])^2)) + randX[j] + 2 + randEpsilon[j]
vecX[j] <- randX[j]
vecFx[j] <- fx
}
testingData <- cbind(testingData, data.frame(name = vecX))
testingData <- cbind(testingData, data.frame(name2 = vecFx))
}
colnames(testingData) <- c("dummy", "x1", "fx1", "x2", "fx2", "x3", "fx3", "x4", "fx4", "x5", "fx5", "x6", "fx6", "x7", "fx7", "x8", "fx8", "x9", "fx9", "x10", "fx10")
testingData <- testingData[,-1]
fun.1 <- function(x) x^3 - 5*x^2 + x + 2
ggplot(data = trainingData, mapping = aes(x = x2, y = fx2)) +
geom_point() +
stat_function(fun = fun.1) + xlim(0,10)
## Creating Models and Calculating MSE for training and test
dummyVec <- c(1,2,3,4,5)
dummyMatrix <- matrix(0, ncol = 10, nrow = 5)
testMSE.df <- data.frame(dummyMatrix)
## Polynomial 1
polyMSEs <- data.frame(id = dummyVec, stringsAsFactors=TRUE)
for (i in (1:10)){ # For each training set
# build polynomial model
xName <- paste("x",i, sep="")
fxName <- paste("fx",i, sep="")
trainingMSEs <- c()
for (k in (1:5)){
lm.obj <- lm(trainingData[,(i*2)] ~ poly(trainingData[,i*2-1],k))
# calculate the singlular training MSE for the model
traingMSE <- mean((trainingData[,(i*2)] - lm.obj$fitted.values)^2)
trainingMSEs <- append(trainingMSEs, traingMSE)
testMSEs <- c()
for (j in (1:10)){
prediction <- as.vector( predict.lm(lm.obj, as.data.frame( testingData[, (2*j-1)]  ) ) )
testMSE <- mean(( testingData[,(2*i)] - prediction)^2)
testMSEs <- append(testMSEs, testMSE)
}
avgtestMSE <- mean(testMSEs)
testMSE.df[k,i] <- avgtestMSE
}
polyMSEs <- cbind(polyMSEs, trainingMSEs)
}
colnames(polyMSEs) <- c('degree','trainMSE1','trainMSE2','trainMSE3','trainMSE4','trainMSE5','trainMSE6','trainMSE7','trainMSE8','trainMSE9','trainMSE10')
polyMSEs <- polyMSEs %>% mutate(avgMSE = Reduce("+",.)/length(.))
library(ISLR)
View(Auto)
pairs(Auto)
cor(Auto[,names(Auto) !="name"])
regression.model = lm(mpg ~. -name, data = Auto)
summary(regression.model)
# Model with horsepower interacting with weight.
lm.fit = lm(mpg ~ origin+weight+year+displacement+(horsepower*weight), data=Auto)
summary(lm.fit)
# linear combination of logs
lm.fit = lm(mpg ~ log(cylinders)+log(origin)+log(weight)+log(year)+log(displacement)+log(acceleration), data=Auto)
summary(lm.fit)
## Creating Models and Calculating MSE for training and test
dummyVec <- c(1,2,3,4,5)
dummyMatrix <- matrix(0, ncol = 10, nrow = 5)
testMSE.df <- data.frame(dummyMatrix)
## Polynomial 1
polyMSEs <- data.frame(id = dummyVec, stringsAsFactors=TRUE)
for (i in (1:10)){ # For each training set
xName <- paste("x",i, sep="")
fxName <- paste("fx",i, sep="")
trainingMSEs <- c()
for (k in (1:5)){
lm.obj <- lm(trainingData[,(i*2)] ~ poly(trainingData[,i*2-1],k))
traingMSE <- mean((trainingData[,(i*2)] - lm.obj$fitted.values)^2)
trainingMSEs <- append(trainingMSEs, traingMSE)
testMSEs <- c()
for (j in (1:10)){
prediction <- as.vector( predict(lm.obj, as.data.frame( testingData[, (2*j-1)]  ) ) )
testMSE <- mean(( testingData[,(2*i)] - prediction)^2)
testMSEs <- append(testMSEs, testMSE)
}
avgtestMSE <- mean(testMSEs)
testMSE.df[k,i] <- avgtestMSE
}
polyMSEs <- cbind(polyMSEs, trainingMSEs)
}
colnames(polyMSEs) <- c('degree','trainMSE1','trainMSE2','trainMSE3','trainMSE4','trainMSE5','trainMSE6','trainMSE7','trainMSE8','trainMSE9','trainMSE10')
polyMSEs <- polyMSEs %>% mutate(avgMSE = Reduce("+",.)/length(.))
View(testMSE.df)
## Creating Models and Calculating MSE for training and test
dummyVec <- c(1,2,3,4,5)
dummyMatrix <- matrix(0, ncol = 10, nrow = 5)
testMSE.df <- data.frame(dummyMatrix)
## Polynomial 1
polyMSEs <- data.frame(id = dummyVec, stringsAsFactors=TRUE)
for (i in (1:10)){ # For each training set
xName <- paste("x",i, sep="")
fxName <- paste("fx",i, sep="")
trainingMSEs <- c()
for (k in (1:5)){
lm.obj <- lm(trainingData[,(i*2)] ~ poly(trainingData[,i*2-1],k))
traingMSE <- mean((trainingData[,(i*2)] - lm.obj$fitted.values)^2)
trainingMSEs <- append(trainingMSEs, traingMSE)
testMSEs <- c()
for (j in (1:10)){
prediction <- as.vector( predict(lm.obj, as.data.frame( testingData[, (2*j-1)]  ) ) )
testMSE <- mean(( testingData[,(2*j)] - prediction)^2)
testMSEs <- append(testMSEs, testMSE)
}
avgtestMSE <- mean(testMSEs)
testMSE.df[k,i] <- avgtestMSE
}
polyMSEs <- cbind(polyMSEs, trainingMSEs)
}
colnames(polyMSEs) <- c('degree','trainMSE1','trainMSE2','trainMSE3','trainMSE4','trainMSE5','trainMSE6','trainMSE7','trainMSE8','trainMSE9','trainMSE10')
polyMSEs <- polyMSEs %>% mutate(avgMSE = Reduce("+",.)/length(.))
View(testMSE.df)
View(testMSE.df)
## Creating Models and Calculating MSE for training and test
dummyVec <- c(1,2,3,4,5)
dummyMatrix <- matrix(0, ncol = 10, nrow = 5)
testMSE.df <- data.frame(dummyMatrix)
## Polynomial 1
polyMSEs <- data.frame(id = dummyVec, stringsAsFactors=TRUE)
for (i in (1:10)){ # For each training set
xName <- paste("x",i, sep="")
fxName <- paste("fx",i, sep="")
trainingMSEs <- c()
for (k in (1:5)){
lm.obj <- lm(trainingData[,(i*2)] ~ poly(trainingData[,i*2-1],k))
traingMSE <- mean((trainingData[,(i*2)] - lm.obj$fitted.values)^2)
trainingMSEs <- append(trainingMSEs, traingMSE)
testMSEs <- c()
for (j in (1:10)){
prediction <- as.vector( predict(lm.obj, as.data.frame( testingData[, (2*j-1)]  ) ) )
testMSE <- mean(( testingData[,(2*j)] - prediction)^2)
testMSEs <- append(testMSEs, testMSE)
}
avgtestMSE <- mean(testMSEs)
testMSE.df[k,i] <- avgtestMSE
}
polyMSEs <- cbind(polyMSEs, trainingMSEs)
}
colnames(polyMSEs) <- c('degree','trainMSE1','trainMSE2','trainMSE3','trainMSE4','trainMSE5','trainMSE6','trainMSE7','trainMSE8','trainMSE9','trainMSE10')
polyMSEs <- polyMSEs %>% mutate(avgMSE = Reduce("+",.)/length(.))
View(testMSE.df)
View(testMSE.df)
colnames(testMSE.df) <- c('testMSE1','testMSE2','testMSE3','testMSE4','testMSE5','testMSE6','testMSE7','testMSE8','testMSE9','testMSE10')
colnames(testMSE.df) <- c('testMSE1','testMSE2','testMSE3','testMSE4','testMSE5','testMSE6','testMSE7','testMSE8','testMSE9','testMSE10')
testMSE.df <- testMSE.df %>% mutate(avg = Reduce("+",.)/length(.))
View(testMSE.df)
View(polyMSEs)
fun.1 <- function(x) x^3 - 5*x^2 + x + 2
ggplot(data = trainingData, mapping = aes(x = x2, y = fx2)) +
geom_point() +
stat_function(fun = fun.1) + xlim(0,10)
